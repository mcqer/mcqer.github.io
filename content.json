{"meta":{"title":"嘿哈吼哈","subtitle":null,"description":null,"author":"嘿哈吼哈","url":"https://mcqer.github.io","root":"/"},"pages":[],"posts":[{"title":"","slug":"新建文本文档","date":"2019-09-29T04:31:16.458Z","updated":"2019-09-29T04:31:16.458Z","comments":true,"path":"2019/09/29/新建文本文档/","link":"","permalink":"https://mcqer.github.io/2019/09/29/新建文本文档/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"jq学习部分","slug":"jq","date":"2019-09-29T04:13:00.279Z","updated":"2019-09-29T04:15:27.680Z","comments":true,"path":"2019/09/29/jq/","link":"","permalink":"https://mcqer.github.io/2019/09/29/jq/","excerpt":"jq学习部分笔记","text":"jq学习部分笔记 页面加载事件12345678910111213141516171819202122 //点击按钮，显示一句话 //页面全部加载完成后加载$(document).load(function () &#123; console.log(\"111\");&#125;);$(document).load(function () &#123; console.log(\"2222\");&#125;);//第二种 ---比上面的快 在页面出现基本元素后就加载成功 $(document).ready(function () &#123; console.log(\"1\"); &#125;); $(document).ready(function () &#123; console.log(\"2\"); &#125;); //第三种 ---也是页面中基本元素加载后就触发 jQuery(function () &#123; console.log(\"页面加载了1\"); &#125;); jQuery(function () &#123; console.log(\"页面加载了222\"); &#125;); jQuery和DOM的转换jquery对象是一个数组对象，可以通过【index】的方法得到相应的DOM对象。12345var $cr = $(\"p\"); //jquery对象var cr = $cr[1]; //dom对象var ct = $cr.get(0) //第二种转换为DOM对象的方式cr.innerHTML = \"you\" //检测是否转换成功，可以用DOM方法 输出结果为第二个my改成了youct.innerHTML = 'fuck' //输出结果第一个my改成了fuck 对于一个DOM对象,只需要用$()把DOM对象给包装起来，就可以获得一个jquery对象了，方式为$(DOM对象)。 var cr = document.getElementsByTagName(“p”) //DOM对象 var $cr = $(cr); //jquery对象 $cr.eq(0).(“fuck”); //检测是否转换成功，可以用jquery方法 输出结果为第二个my改成了fuck$cr.eq(1).html(&quot;you&quot;); //输出结果为my改成you jQuery获取页面元素的方式1. 正常1 通过id$（“#id属性的值”）； 2 通过类名称$(“。类的class的值”); 3 通过标签$(“标签名字”); 可以获取所有的 4 获取全部$(“*”); 获取所有元素 2元素属性选择器$(“[href]”); 所有带href的属性的元素 $(“[href=‘#’]”); href 的属性值等于“#” 的元素 $(“[href!=‘#’]”); href 的属性值不等于“#” 的元素 $(“[href=‘.jpg’]”); href 的属性的值包含以”。jpg”结尾的元素 3 元素定位(基本过滤器):first $(“p:first”) 第一个p元素 :last $(“p:last”) 最后一个p元素 :even $(“tr:even”) 所有偶数的tr元素 :odd $(“tr:odd”) 所有奇数的tr元素 :eq(index) $(“ul li :eq(3)”) ul中 第四个元素 从index0开始 :gt(no) $(“ul li:gt(3)”) 列出 index大于三的元素 :lt(no) $(“ul li:lt(3)”) 列出index小于三的元素 :not(seletor) $(“input:not(:empty)”) 所有不为空的input元素 4 ：元素过滤器选择器:contains(text) $(:contains(‘wwwww’)) 包含指定自字符的所有元素 :empty $(“:empty”) 元素节点的所有元素 可见性的过滤器选择器:hidden $(p:hidden) 所有隐藏的p元素 :visible $(“table:visible”) 所有可见的表格 $(this).next(“li”) 获取下一个li的元素 $(this).prev(“li”) 获取上一个元素 $(this).nextAll(“li”) 获取li后面的所有兄弟元素 $(this).prevAll(“li”) 获取li前面所有的兄弟元素 $(this).siblings(“li”) 获取当前li的所有兄弟元素 除了自己 1。操作样式1 css操作设置单个样式 设置多个样式 获取样式 2 class 操作addClass（name） ：添加类 removeClass （name） ：移除类 hasCLass（name） ：判断类 toggleClass（name）：切换类 2.操作属性attr设置单个属性 设置多个属性 获取属性 prop对于布尔类型的属性 disabled ，selected ，checked 只用prop removeAttr（name） ：移除某个属性 动画3组基本动画show/hide slideDown/slideUp/slideToggle fadeIn/fadeOut/fadeToggle 自定义动画animate(prop. [speed], [swing/linear], [callback] ) 停止动画stop (); 操作节点创建节点$(““) 添加节点append appendTo prepend prependTo after before 清空节点empty 删除节点remove 克隆节点clone slideDown（）滑出 slideUp（）滑入 slideToggle（）切换滑入和滑出 fadeIn（）淡入 fadeOut（）淡出 fadeToggle（）切换的淡入淡出 fadeTo（时间，透明值结束）","categories":[],"tags":[]},{"title":"H5学习","slug":"h5","date":"2019-09-29T04:10:33.461Z","updated":"2019-09-29T04:10:17.646Z","comments":true,"path":"2019/09/29/h5/","link":"","permalink":"https://mcqer.github.io/2019/09/29/h5/","excerpt":"H5自学的一些","text":"H5自学的一些 H5新加标签 标签 描述 定义页面独立的内容区域。 定义页面的侧边栏内容。 允许您设置一段文本，使其脱离其父元素的文本方向设置。 定义命令按钮，比如单选按钮、复选框或按钮 用于描述文档或文档某个部分的细节 定义对话框，比如提示框 标签包含 details 元素的标题 规定独立的流内容（图像、图表、照片、代码等等）。 定义 元素的标题 定义 section 或 document 的页脚。 定义了文档的头部区域 定义带有记号的文本。 定义度量衡。仅用于已知最大和最小值的度量。 定义导航链接的部分。 定义任何类型的任务的进度。 定义 ruby 注释（中文注音或字符）。 定义字符（中文注音或字符）的解释或发音。 在 ruby 注释中使用，定义不支持 ruby 元素的浏览器所显示的内容。 定义文档中的节（section、区段）。 定义日期或时间。 规定在文本中的何处适合添加换行符。 meter属性 属性 值 描述 form form_id 规定 元素所属的一个或多个表单。 high number 规定被视作高的值的范围。 low number 规定被视作低的值的范围。 max number 规定范围的最大值。 min number 规定范围的最小值。 optimum number 规定度量的优化值。 value number 必需。规定度量的当前值。 设置meter样式meter{ ​ 设置宽高 } meter : : -webkit-meter-bar { ​ 设置总体边框，空白区域背景 } meter : : -webkit-meter-optimun-value { ​ 最优范围内的样式 } meter : : -webkit -meter-suboptimum- value{ ​ 一般范围范围内的样式 } meter : : -webkit-meter-even-less-good-value{ ​ 糟糕 范围的样式 } progress 属性 值 描述 max number 规定任务一共需要多少工作。 value number 规定已经完成多少任务。 设置progress样式progress{ ​ 设置宽高 ​ 边框线 写一个就好 ​ /// IE设置进度条颜色 } progress : : -webkit-progrsee-bar{ ​ 还没有选择的颜色 } progress : : -webkit-progress-value { ​ 已经选择了的颜色 } datalist 标签定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。 datalist 及其选项不会被显示出来，它仅仅是合法的输入值列表。 请使用 input 元素的 list 属性来绑定 datalist。 details 标签用于描述文档或文档某个部分的细节。 浏览器支持目前只有 Chrome 支持 标签。 HTML 4.01 与 HTML 5 之间的差异 标签是 HTML 5 中的新标签。 提示和注释提示：与 标签 配合使用可以为 details 定义标题。标题是可见的，用户点击标题时，会显示出 details。 属性new : HTML5 中的新属性。 属性 值 描述 open open 定义 details 是否可见。 ruby给文字标志拼音 1234&lt;ruby&gt;你好 &lt;rt&gt;nihao&lt;/rt&gt;&lt;/ruby&gt; mark​ 给文字加黄色的背景，可以更改背景颜色 figure给文章文字配图 figcaption给图片说明 textarea 属性 值 描述 autofocus*New * autofocus 规定当页面加载时，文本区域自动获得焦点。 cols number 规定文本区域内可见的宽度。 disabled disabled 规定禁用文本区域。 formNew form_id 定义文本区域所属的一个或多个表单。 maxlengthNew number 规定文本区域允许的最大字符数。 name text 规定文本区域的名称。 placeholderNew text 规定一个简短的提示，描述文本区域期望的输入值。 readonly readonly 规定文本区域为只读。 requiredNew required 规定文本区域是必需的/必填的。 rows number 规定文本区域内可见的行数。 wrapNew hard soft 规定当提交表单时，文本区域中的文本应该怎样换行。 required表示必须，用于所有表单 outofoucs自动获取焦点，用于所有表单 autocomplate自动完成 值为on或者off 用于取消浏览器输入的记忆提示","categories":[],"tags":[]},{"title":"个人博客搭建","slug":"搭建个人博客","date":"2019-09-29T02:45:29.895Z","updated":"2019-09-29T04:26:13.393Z","comments":true,"path":"2019/09/29/搭建个人博客/","link":"","permalink":"https://mcqer.github.io/2019/09/29/搭建个人博客/","excerpt":"​ 这也算是本人的第一个hexo框架博客，其中有我同学的帮助，感谢。 ​ 接下来是搭建过程，全长半个小时，博客就可以搭建成功。 ​","text":"​ 这也算是本人的第一个hexo框架博客，其中有我同学的帮助，感谢。 ​ 接下来是搭建过程，全长半个小时，博客就可以搭建成功。 ​ 准备材料​ 下载一个vs code ​ github账号 下载一个git 就可以了 一个typora 就可以了 ​ 安装node 在 http://nodejs.cn/ 可以直接下载 一台win10 电脑 win7 也可以 ​ 搭建环境1. 创建一个git仓库注意命名有规范 [ username ] .github.io git 的仓库最多可以存储1G 2搭建hexo环境https://hexo.io/zh-cn/docs/ 这个是hexo的中文文档可以用来参考 先检查node是否安装好打开 cmd 输入node -v 查看node版本 最好是10 以上 接下来是使用npm搭建 首先检查npm是否安装cmd输入 1$ npm -v 出现如下 在cmd中输入 12 $ npm install -g hexo-cli 安装好hexo后 hexo会在指定文件搭建所需要的文件 用吃 cd../ 回到C盘 cmd 输入如下命令 可以任意输入 这个作为博客配置的文件 最好设置为blog 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 在文件管理器打开建立的文件 node_modules 存放着相关的依赖包 scaffolds 模板文件，用来在自己编写的新文章中添加一些默认内容 source 存放用户资源，你的markdown文章都将存放在这里，最终解析放到/public/文件夹中 themes 则是主题资源，hexo将其中的文件解析成静态页面 package.json 为依赖包的相关信息 使用vs code 打开文件 title 网站标题 subtitle 副标题 description 网站描述 keyword 关键字 用于SEO author 作者 language 语言 国人就用zh-CN吧，不设置也可以 timezone 时区 默认使用个人电脑的时区 修改 urlurl为刚才注册git仓库的名字 修改deploy修改repo 注意是ssh 配置ssh配置成功后 桌面右键打开 在自己创建的文件中的命令行 输入 1ssh-keygen -t rsa -C 'xxxxx@qq.com' -f ~/.ssh/github_id_rsa 出来的密匙右键复制 打开github官网 进入设置 tite为电脑名称 key为刚才复制的 配置完成后，安装新的插件： 1$ npm i hexo-server --save 安装完成后在目录下执行命令： 1$ hexo server 成功后，会启动 hexo 服务，可以在浏览器中输入http://localhost:4000，查看博客页面效果。没有问题后就可以准备部署到GitHub上了，在这之前需要安装插件。执行命令： 1$ npm i hexo-deployer-git --save 部署到GitHub： 1$ hexo g -d 部署完成后，可以在GitHub仓库中发现 pull 了新的文件，接下来就可以输入自己的网址开始使用博客了。 写文章1234567891011&lt;!--more--&gt; 后面为文章的全部每次写好文章保存在 图下 使用typora写好后保存在cmd中打开blog文件输入$ hexo clean$ hexo g$ hexo d","categories":[],"tags":[]}]}